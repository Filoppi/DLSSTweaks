; DLSSTweaks by emoose - https://github.com/emoose/DLSSTweaks
; Wrapper DLL that can force DLAA onto DLSS-supported games, along with tweaking the scaling ratios & presets used by them

; DLSSTweaks now offers two ways of loading itself in, to help with systems that had issues with the older method:
;
; - Naming the DLSSTweaks DLL as "nvngx.dll" will wrap the nvngx.dll DLSS module, usually has the best chance of working since it requires less code hooks to be installed.
;   However, this method needs a registry change to be applied first to stop DLSS from checking the nvngx.dll signature.
;   Reg file for that can be found at https://github.com/emoose/DLSSTweaks/blob/master/EnableSignatureOverride.reg, just download it and double-click -> Run -> Yes to all prompts.
;
; - Alternatively, a legacy method can be used by naming the DLSSTweaks DLL as one of the following names.
;   (different games may require certain filenames to load in properly, and some games may have issues with this method altogether, the nvngx.dll method above is recommended)
;   - XInput1_3.dll
;   - XInput1_4.dll
;   - XInput9_1_0.dll
;   - XAPOFX1_5.dll
;   - X3DAudio1_7.dll
;   - dxgi.dll
;   - winmm.dll
;
; If you find a DLSS-supported game that doesn't work with either of these methods please let me know!

; DLSSTweaks was built for DLSS 3.1.1, but should work on earlier versions too
; The DLSSPresets section will only work on 3.1.1 and newer however

; It's recommended to test the game with the dev DLSS DLL + OverrideDlssHud to make sure tweaks here are being applied
; If it works with dev DLL you can then switch to the regular release DLL fine
; The dev DLL is available at https://github.com/NVIDIA/DLSS/tree/main/lib/Windows_x86_64/dev

[DLSS]
; ForceDLAA: forces all DLSS quality modes to act as DLAA instead, making the game render in full-res, while DLSS applies itself over it
; Should help with games that support DLSS scaling but not DLAA itself
; To use this just enable DLSS mode in the game, any quality should be fine, they should all render at full-res
; (certain modes might make the game use different mip biasing settings though, so feel free to experiment with them!)
; You can confirm whether DLAA is active by using the OverrideDlssHud, the overlay text should mention both render resolution & upscaled resolution, if they match then DLAA is active
; Preset F is recommended for use with DLAA, you can set that in the DLSSPresets section
; If the game has problems running with full-res DLAA it could be worth changing the ResolutionOffset setting below
; (if DLSSQualityLevels:Enabled = true then ForceDLAA won't be applied, and ratios will be used from that section instead)
ForceDLAA = false

; OverrideDlssDll: allows overriding the path to load the nvngx_dlss.dll file from
; Some game launchers such as RGL may overwrite the nvngx_dlss.dll on launch, preventing you from changing the version
; To workaround that you can uncomment the line below (remove the ";"), copy your new DLSS DLL to nvngx_dlss_new.dll, and hopefully game should load it in fine
; (recommend testing with OverrideDlssHud setting below to make sure your new DLL is loaded in)
;OverrideDlssDll = nvngx_dlss_new.dll
; Alternatively you can specify a full path like so (quotes shouldn't be needed for paths containing spaces etc)
;OverrideDlssDll = C:\Users\Username\Desktop\DLSS Releases\3.1.1\rel\nvngx_dlss.dll

; OverrideAutoExposure: allows forcing DLSS auto-exposure to be enabled/disabled/left at default
; Certain DLSS2 titles may have an "AutoExposure" option in-game, which might fail to activate with DLSS3.1
; In that case you can force it to enable here
; Some early titles might also benefit from having AutoExposure forced (reducing ghosting issues in certain titles)
; More info at https://github.com/emoose/DLSSTweaks/issues/53#issuecomment-1479820194
; Set to 0 to leave it at default, 1 to force enable, or -1 to force disable
OverrideAutoExposure = 0

; OverrideDlssHud: allows force enabling/disabling the DLSS debug display HUD overlay
; The HUD will display on bottom left of screen in-game when enabled, some titles may draw effects on top of it though
; For those it's recommended to try disabling any post-process effects
; Works with both release & dev DLSS DLL types
; Set to 0 to leave it at default, 1 to force enable, or -1 to force disable
OverrideDlssHud = 0

; DisableDevWatermark: removes watermark shown when using dev DLL
; Only useful if you're using special dev version of DLSS, most won't need this
DisableDevWatermark = false

; WatchIniUpdates: watches the dlsstweaks.ini file for updates & tries applying changes during runtime
; Should allow you to change presets or quality ratios / DLAA during gameplay, by simply editing the dlsstweaks.ini while it's running
; Depends on the game whether updates will actually apply or not, some titles may work immediately, while others may need to have DLSS mode changed in the in-game settings first
; Unfortunately many titles can't have ForceDLAA/DLSSQualityLevels changed at runtime with this, but DLSSPresets should hopefully update fine
WatchIniUpdates = false

[DLSSQualityLevels]
; Allows overriding the ratios that DLSS uses for each quality level
; Note that enabling this section will override the ForceDLAA setting above with the values from here
Enable = false

; Ratios/multipliers applied to each axis of screen resolution
; Set to 1.0 to force this quality level to use full resolution (ie. DLAA)
; Values are clamped/limited to range 0.0 - 1.0
UltraPerformance = 0.33333334
Performance = 0.5
Balanced = 0.58
Quality = 0.66666667

; UltraQuality: some games may allow this to be chosen if uncommented and set to non-zero value
; Very few titles actually allow using this though, but a select few may show an option for it once enabled, giving you an extra DLSS level to choose from
;UltraQuality = 0.77

[DLSSPresets]
; OverrideAppId: for some games DLSS might enforce certain DLSS3.1 presets, even if game tries overriding via DLSS_Hint_Render_Preset_XXX (which is the method we use)
; Preventing any of the DLSSPresets tweaks below from being applied
; To get around that you can enable OverrideAppId to make DLSS think that this is a generic title instead
; Titles that are known to require this for DLSSPresets to work:
; - Dying Light 2
; - Shadow of the Tomb Raider
; - Death Stranding
; - Cyberpunk 2077
OverrideAppId = false

; Overrides the DLSS preset used for each quality level, set to Default to leave the preset set to whatever game/DLSS decided for it
; Or set to A / B / C / D / F to try forcing that preset instead.
; Presets were added in DLSS 3.1, these are essentially the different kinds of DLSS 2.x DLL versions, all merged into 3.1 as these presets
; (so eg. instead of picking the best quality DLSS DLL for your game, you'd just find the right preset for it instead)

; For descriptions of each preset see https://www.reddit.com/r/nvidia/comments/10z2ra9/nvidia_publishes_dlss_super_resolution_sdk_31/j81f9te/

; Unfortunately DLSS tends to override these presets with ones decided by NVIDIA instead
; Enabling the OverrideAppId tweak above might help with those
; (recommend testing with the dev DLSS DLL along with OverrideDlssHud tweak to make sure the preset is being overridden properly)

; Note that some games could have graphical artefacts when certain DLSS presets are overridden onto them
; There's not much DLSSTweaks can do to help with that unfortunately, hopefully trying a different preset or changing scaling ratio could help

DLAA = Default
Quality = Default
Balanced = Default
Performance = Default
UltraPerformance = Default

[Compatibility]
; ResolutionOffset: offsets both resolution axes by this value when DLAA is being applied
; Some games might not function well with full-resolution DLAA for whatever reason
; Subtracting a tiny amount from the resolution first may help with them though
; This offset is only applied to DLAA modes (either from ForceDLAA, DLSSQualityLevels 1.00, or the game setting DLAA itself)
; Titles known to require this for DLAA to work:
; - RE Engine titles (set to -1)
; - Crysis 3 Remastered (set to -1)
ResolutionOffset = 0
